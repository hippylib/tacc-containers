# Builds a Docker image for running FEniCS on TACC machines
# The image is at:
#
#    https://hub.docker.com/r/uvilla/fenics-2019.1-tacc-mvapich2.3-ib
#
# This is a modified version of 
#    https://bitbucket.org/fenics-project/docker/src/master/dockerfiles/dev-env/Dockerfile 
#
# See License for further information
#
# Authors of the original version:
# Jack S. Hale <jack.hale@uni.lu>
# Lizao Li <lzlarryli@gmail.com>
# Garth N. Wells <gnw20@cam.ac.uk>
# Jan Blechta <blechta@karlin.mff.cuni.cz>

FROM tacc/tacc-ubuntu18-mvapich2.3-ib


RUN useradd -m -s /bin/bash -G sudo fenics && \
    echo "fenics:docker" | chpasswd



USER root
WORKDIR /tmp

# Environment variables
ENV FENICS_HOME=/home/fenics
ENV PETSC_VERSION=3.20.2 \
    SLEPC_VERSION=3.20.1 \
    PYBIND11_VERSION=2.11.1  \
    MPI4PY_VERSION=3.1.5 \
    PETSC4PY_VERSION=3.20.2 \
    SLEPC4PY_VERSION=3.20.1 \
    TRILINOS_VERSION=12.10.1 \
    OPENBLAS_NUM_THREADS=1 \
    OPENBLAS_VERBOSE=0 \
    FENICS_PREFIX=$FENICS_HOME/local

# Non-Python utilities and libraries
RUN apt-get -qq update && \
    apt-get -y --with-new-pkgs \
        -o Dpkg::Options::="--force-confold" upgrade && \
    apt-get -y install curl && \
    curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \
    apt-get -y install \
        vim \
        ccache \
        cmake \
        doxygen \
        flex \
        git \
        git-lfs \
        graphviz \
        libboost-filesystem-dev \
        libboost-iostreams-dev \
        libboost-math-dev \
        libboost-program-options-dev \
        libboost-system-dev \
        libboost-thread-dev \
        libboost-timer-dev \
        libeigen3-dev \
        libfreetype6-dev \
        liblapack-dev \
        libopenblas-dev \
        libpcre3-dev \
        libpng-dev \
        libgmp-dev \
        libcln-dev \
        libmpfr-dev \
        man \
        nano \
        pkg-config \
        wget \
        bash-completion && \
    git lfs install && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Build python 3.12 from source
RUN apt-get -qq update && \
    apt-get -y install build-essential libssl-dev zlib1g-dev libbz2-dev \
    libreadline-dev libsqlite3-dev wget curl llvm \
    libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python3-openssl git && \
    wget https://www.python.org/ftp/python/3.12.2/Python-3.12.2.tgz && \
    tar xvf Python-3.12.2.tgz && \
    cd Python-3.12.2 && \
    ./configure --enable-optimizations && \
    make && \
    make altinstall && \
    rm -rf Python-3.12.2.tgz Python-3.12.2

# Update Python from 3.6 to 3.12
RUN update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.12 1

# Install Python3 based environment
RUN apt-get -qq update && \
    apt-get -y --with-new-pkgs \
        -o Dpkg::Options::="--force-confold" upgrade && \
    apt-get -y install \
        python3-dev \
        python3-flufl.lock \
        python3-numpy \
        python3-ply \
        python3-pytest \
        python3-scipy \
        python3-tk \
        python3-urllib3 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install setuptools
RUN wget https://bootstrap.pypa.io/pip/get-pip.py && \
    python3 get-pip.py && \
    pip3 install --no-cache-dir setuptools && \
    rm -rf /tmp/*

# Install PETSc from source
RUN apt-get -qq update && \
    # apt-get -y install \
    #     python-minimal && \
    wget -nc --quiet https://gitlab.com/petsc/petsc/-/archive/v${PETSC_VERSION}/petsc-v${PETSC_VERSION}.tar.gz -O petsc-${PETSC_VERSION}.tar.gz && \
    mkdir -p petsc-src && tar -xf petsc-${PETSC_VERSION}.tar.gz -C petsc-src --strip-components 1 && \
    cd petsc-src && \
    ./configure CFLAGS=$CFLAGS \
                CXXFLAGS=$CXXFLAGS \
                FFLAGS="-O2" \
                --with-fortran-bindings=no \
                --with-debugging=0 \
                --download-blacs \
                --download-cmake \
                --download-hypre \
                --download-metis \
                --download-mumps \
                --download-ptscotch \
                --download-scalapack \
                --download-spai \
                --download-suitesparse \
                --download-superlu \
                --download-hdf5\
                --download-strumpack \
                --download-ml \
                --prefix=/usr/local/petsc-32 && \
     make && \
     make install && \
     rm -rf /tmp/*

ENV HDF5_ROOT=/usr/local/petsc-32
ENV SCOTCH_DIR=/usr/local/petsc-32

# Install SLEPc from source
# NOTE: Had issues building SLEPc from source tarball generated by bitbucket.
# Website tarballs work fine, however.
RUN apt-get -qq update && \
    # apt-get -y install \
    #     python-minimal && \
    wget -nc --quiet https://gitlab.com/slepc/slepc/-/archive/v${SLEPC_VERSION}/slepc-v${SLEPC_VERSION}.tar.gz -O slepc-${SLEPC_VERSION}.tar.gz && \
    mkdir -p slepc-src && tar -xf slepc-${SLEPC_VERSION}.tar.gz -C slepc-src --strip-components 1 && \
    export PETSC_DIR=/usr/local/petsc-32 && \
    cd slepc-src && \
    ./configure --prefix=/usr/local/slepc-32 && \
    make SLEPC_DIR=$(pwd) && \
    make install && \
    rm -rf /tmp/*

# By default use the 32-bit build of SLEPc and PETSc.
ENV SLEPC_DIR=/usr/local/slepc-32 \
    PETSC_DIR=/usr/local/petsc-32

# Install jupyterlab, sympy, mpi4py, petsc4py, slepc4py and pybind11 from source.
RUN pip3 install --no-cache-dir jupyter jupyterlab matplotlib scipy sympy tqdm pkgconfig  && \
    pip3 install --no-cache-dir mpi4py==${MPI4PY_VERSION} && \
    pip3 install --no-cache-dir petsc4py==${PETSC4PY_VERSION} && \
    pip3 install --no-cache-dir slepc4py==${SLEPC4PY_VERSION} && \
    pip3 install --no-cache-dir pybind11==${PYBIND11_VERSION} && \
    wget -nc --quiet https://github.com/pybind/pybind11/archive/v${PYBIND11_VERSION}.tar.gz && \
    tar -xf v${PYBIND11_VERSION}.tar.gz && \
    cd pybind11-${PYBIND11_VERSION} && \
    mkdir build && \
    cd build && \
    cmake -DPYBIND11_TEST=False ../ && \
    make && \
    make install && \
    rm -rf /tmp/*

# Our helper scripts
WORKDIR $FENICS_HOME
COPY fenics.env.conf $FENICS_HOME/fenics.env.conf
COPY bin $FENICS_HOME/bin
RUN chmod +x bin/*
RUN PYTHON3_SITE_DIR=$(python3 -c "import site; print(site.getsitepackages()[0])") && \
    PYTHON3_VERSION=$(python3 -c 'import sys; print(str(sys.version_info[0]) + "." + str(sys.version_info[1]))') && \
    echo "$FENICS_HOME/local/lib/python$PYTHON3_VERSION/site-packages" >> $PYTHON3_SITE_DIR/fenics-user.pth && \
    chown -R fenics:fenics $FENICS_HOME

RUN echo 'source ~/.profile' >> $FENICS_HOME/.bash_profile && \
    echo '. ~/fenics.env.conf' >> $FENICS_HOME/.profile && \
    mkdir -p $FENICS_HOME/.config/matplotlib
COPY matplotlibrc $FENICS_HOME/.config/matplotlib/matplotlibrc
COPY WELCOME $FENICS_HOME/WELCOME

USER root

ENV FENICS_BUILD_TYPE=Release
ENV FENICS_SRC_DIR=/tmp/src
ENV FENICS_PREFIX=/usr/local

RUN /home/fenics/bin/fenics-pull && \
    PIP_NO_CACHE_DIR=off \
    /home/fenics/bin/fenics-build

# symbol link ufl to ufl_legacy
RUN ln -s /usr/local/lib/python3.12/site-packages/ufl_legacy /usr/local/lib/python3.12/site-packages/ufl

RUN ldconfig